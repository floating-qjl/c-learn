#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
int main()
{
	//1.对NULL进行解引用操作

	int* p1 = (int*)malloc(40);
	//万一malloc失败了，p就会被赋值为NULL
	//而下面的代码会对空指针进行解引用操作，这是错误的
	int i = 0;
	for (i = 0;i < 10;i++)
	{
		*(p1 + i) = i;
	}
	free(p1);
	p1 = NULL;


	//2.对动态开辟内存空间的越界访问

	int* p2=(int*)malloc(5 * sizeof(int));
	//此处只开辟 5 个整形空间
	//而下面的代码越界了，会造成程序崩溃
	if (p2 == NULL)
		return 0;
	else 
	{
		int i = 0;
		for (i = 0;i < 10;i++)
		{
			*(p2 + i) = i;
		}
	}
	free(p2);
	p2 = NULL;


	//3.对非动态开辟内存使用free释放

	int a = 10;
	int* p = &a;
	*p = 20;
	//局部变量在栈区储存，而动态内存在堆区存放
	free(p);
	p = NULL;
	//这种写法是错误的

	return 0;
}
