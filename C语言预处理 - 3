#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
//#define 为定义标识符，是预处理指令(#define ,#include ,#pragma ,#if ,#endif ,#ifdef ,#line )

#define max 100
//定义 整形数据

#define str "hehe"
//定义 字符串

#define reg register
//缩短关键字的名称长度（创建一个简短的名字）

#define do_forever for(;;)
//创建一个可以 死循环 的名称
//define 后面不能加;；否则定义的名称会包含；使得代码出现问题

#define SQUARE(X) X*X
//定义 宏  ，允许把参数替换到文本中
//参数列表的左括号必须与 name 紧邻，如果两者之间有任何空白存在，参数列表就会被解释为stuff（表达式）的一部分

//在调用宏时，首先对参数进行检查，看看是否包含任何由 #define 定义的符号（名称），如果是，他们首先被替换
//替换文本随后被插入到程序中文本原来的位置，对于宏，参数名被他们的值替换
//最后，再次对结果文件进行扫描，看看它是否包含任何由 #define 定义的符号，若果是，就重复上述处理过程

//注意：1.宏参数和 #define 定义中可以出现其他 #define 定义的量，但是对于宏，不能出现递归
//      2.当预处理器搜索 #define 定义的符号的时候，字符串常量的内容并不被搜索



int main()
{
	int a = max;
	//在预编译之后 会变成 int a = 100;
	printf("%d\n", a);
	printf("%s\n", str);

	//do_forever;
	//如果不加分号就会被 return 0;结束 ，不会死循环(必须下方紧接着return)

	int ret = SQUARE(5);
	//此时用 X 的表达式进行运算
	//而 SQUARE 就是宏，宏的参数是替换而不是传参，例如 SQUARE（5+1）会替换成 5+1*5+1 得到结果 11
	//可以给定义的 X*X 加上括号，让其变成独立的个体，免去符号优先级的问题，例如 (X)*(X)
	//同时，替换的数据的表达式也会参与原运算，例如：
	int hh = 10 * SQUARE(5);
	//若此时定义宏为 SQUARE(X) X+X
	//运算为 10*5+5 答案为 55，因此在使用宏的时候不要吝啬括号
	printf("%d ", hh);

	return 0;
}
