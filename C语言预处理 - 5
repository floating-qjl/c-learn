#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

//带副作用的宏参数

//当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么你在使用这个宏的时候就可能出现危险
//导致不可预测的后果，副作用就是表达式求值的时候出现的永久性效果
// x + 1 - 无副作用
// x++   - 有副作用

#define MAX(X,Y) ((X)>(Y)?(X):(Y))
#define SIZEOF(type) sizeof(type)

//#undef 可以帮助移除一条 宏 定义
//例如：#undef MAX

int main()
{
	int a = 10;
	int b = 11;
	int max = MAX(a++, b++);
	//相当于 int max = ((a++) > (b++) ? (a++) : (b++));
	//b 自增了两次，a 自增了一次
	printf("%d\n", max);
	printf("%d\n", a);
	printf("%d\n", b);
	

	int ret = SIZEOF(int);
	//int ret = sizeof(int);
	printf("%d\n", ret);
	return 0;
}
//宏与函数的区别：1.宏没有 函数 数据类型的限制，即不会精度丢失（因为是直接替换）
//                2.函数在调用的时候，会有函数调用和返回的开销（汇编代码），而 宏 在预处理的时候就完成了替换
//                  所以 宏 比函数在程序的规模和速度方面更胜一筹
//                3.每次使用 宏 的时候，一份宏定义的代码将插入到程序中，除非宏比较短，否则可能大幅度增加程序的长度
//                4.宏是没办法调试的
//                5.宏由于类型无关，其本身并不严谨
//                6.宏可能会带来运算符优先级的问题，导致程序容易出错
//                7.宏可以直接替换成类型（int），而函数不行

//命名约定：一般来说，函数和宏的语法相似，所以语言本身无法帮助我们区分二者
//因此约定 宏 的命名全部大写，函数 的命名不要全部大写
